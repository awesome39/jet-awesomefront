async= require 'async'


module.exports= (connect) ->

    return class Store extends connect.session.Store

        constructor: (@db, @table) ->
            super



        get: (sid, done) ->
            async.waterfall [

                (done) =>
                    @db.getConnection (err, conn) ->
                        return done err, conn

                (conn, done) =>
                    conn.query 'SELECT * FROM ?? WHERE id = ?'
                    ,   [@table, sid]
                    ,   (err, resp) ->
                            data= resp.shift if not err
                            return done err, conn, data

            ],  (err, conn, data) ->
                    do conn.end if conn

                    try
                        data= JSON.parse data if data
                    catch e
                        data= null
                    return done err, data



        set: (sid, data, done) ->
            async.waterfall [

                (done) =>
                    @db.getConnection (err, conn) ->
                        return done err, conn

                (conn, done) =>
                    try
                        data=
                            id: sid
                            data: JSON.stringify data
                    catch e
                        return done e, conn
                    conn.query 'INSERT INTO ?? SET ?'
                    ,   [@table, data]
                    ,   (err, resp) ->
                            return done err, conn

            ],  (err, conn, data) ->
                    do conn.end if conn

                    return done err, data



        destroy: (sid, done) ->
            async.waterfall [

                (done) =>
                    @db.getConnection (err, conn) ->
                        return done err, conn

                (conn, done) =>
                    conn.query 'DELETE FROM ?? WHERE ID = ?'
                    ,   [@table, sid]
                    ,   (err, resp) ->
                            return done err, conn

            ],  (err, conn) ->
                    do conn.end if conn

                    return done err